name: Build Multi-Platform Release

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      build_windows:
        description: 'Build Windows'
        required: false
        default: true
        type: boolean
      build_macos:
        description: 'Build macOS'
        required: false
        default: true
        type: boolean
      build_linux:
        description: 'Build Linux'
        required: false
        default: false
        type: boolean

jobs:
  # Windows 构建
  build-windows:
    if: github.event.inputs.build_windows != 'false'
    runs-on: windows-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.19.4'
        channel: 'stable'
        cache: true
        
    - name: Enable Windows desktop
      run: flutter config --enable-windows-desktop
      
    - name: Install dependencies
      run: flutter pub get

    - name: Analyze code (optional)
      run: flutter analyze || true
      continue-on-error: true

    - name: Prepare Windows assets
      run: |
        # 只保留 Windows 平台的可执行文件
        Remove-Item -Path "assets/bin/N_m3u8DL-RE" -Force -ErrorAction SilentlyContinue
        Remove-Item -Path "assets/bin/ffmpeg" -Force -ErrorAction SilentlyContinue
        Write-Host "Windows assets prepared - keeping .exe files only"
      shell: powershell

    - name: Build Windows Release
      run: flutter build windows --release --verbose

    - name: Debug - List Windows build directory structure
      run: |
        Write-Host "Listing build directory structure:"
        if (Test-Path "build") {
          Get-ChildItem -Path "build" -Recurse -Directory | Select-Object FullName
          Write-Host "Looking for executable files:"
          Get-ChildItem -Path "build" -Recurse -Filter "*.exe" | Select-Object FullName
        } else {
          Write-Host "Build directory does not exist"
        }
      shell: powershell

    - name: Install NSIS
      run: |
        # Download and install NSIS
        Invoke-WebRequest -Uri "https://downloads.sourceforge.net/project/nsis/NSIS%203/3.09/nsis-3.09-setup.exe" -OutFile "nsis-setup.exe"
        Start-Process -FilePath "nsis-setup.exe" -ArgumentList "/S" -Wait
        # Add NSIS to PATH
        $env:PATH += ";C:\Program Files (x86)\NSIS"
        echo "C:\Program Files (x86)\NSIS" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      shell: powershell

    - name: Create NSIS installer script
      run: |
        $nsisScript = @"
        !define APP_NAME "Shiplus"
        !define APP_VERSION "1.0.0"
        !define APP_PUBLISHER "Shiplus Team"
        !define APP_URL "https://github.com/your-repo/shiplus"
        !define APP_DESCRIPTION "Shiplus - F1 Video Downloader"

        # Installer settings
        Name "`${APP_NAME}"
        OutFile "shiplus-windows-x64-installer.exe"
        InstallDir "`$PROGRAMFILES64\`${APP_NAME}"
        InstallDirRegKey HKLM "Software\`${APP_NAME}" "InstallDir"
        RequestExecutionLevel admin

        # Modern UI
        !include "MUI2.nsh"
        !define MUI_ABORTWARNING
        !define MUI_ICON "`${NSISDIR}\Contrib\Graphics\Icons\modern-install.ico"
        !define MUI_UNICON "`${NSISDIR}\Contrib\Graphics\Icons\modern-uninstall.ico"

        # Pages
        !insertmacro MUI_PAGE_WELCOME
        !insertmacro MUI_PAGE_LICENSE "LICENSE"
        !insertmacro MUI_PAGE_DIRECTORY
        !insertmacro MUI_PAGE_INSTFILES
        !insertmacro MUI_PAGE_FINISH

        !insertmacro MUI_UNPAGE_WELCOME
        !insertmacro MUI_UNPAGE_CONFIRM
        !insertmacro MUI_UNPAGE_INSTFILES
        !insertmacro MUI_UNPAGE_FINISH

        # Languages
        !insertmacro MUI_LANGUAGE "English"
        !insertmacro MUI_LANGUAGE "SimpChinese"

        # Version info
        VIProductVersion "1.0.0.0"
        VIAddVersionKey "ProductName" "`${APP_NAME}"
        VIAddVersionKey "ProductVersion" "`${APP_VERSION}"
        VIAddVersionKey "CompanyName" "`${APP_PUBLISHER}"
        VIAddVersionKey "FileDescription" "`${APP_DESCRIPTION}"
        VIAddVersionKey "FileVersion" "`${APP_VERSION}"

        # Installer sections
        Section "MainSection" SEC01
          SetOutPath "`$INSTDIR"
          SetOverwrite ifnewer

          # Copy all files from build directory
          File /r "build\windows\x64\runner\Release\*"

          # Create uninstaller
          WriteUninstaller "`$INSTDIR\uninstall.exe"

          # Registry entries
          WriteRegStr HKLM "Software\`${APP_NAME}" "InstallDir" "`$INSTDIR"
          WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\`${APP_NAME}" "DisplayName" "`${APP_NAME}"
          WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\`${APP_NAME}" "UninstallString" "`$INSTDIR\uninstall.exe"
          WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\`${APP_NAME}" "DisplayIcon" "`$INSTDIR\shiplus.exe"
          WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\`${APP_NAME}" "Publisher" "`${APP_PUBLISHER}"
          WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\`${APP_NAME}" "DisplayVersion" "`${APP_VERSION}"
          WriteRegDWORD HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\`${APP_NAME}" "NoModify" 1
          WriteRegDWORD HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\`${APP_NAME}" "NoRepair" 1
        SectionEnd

        # Desktop shortcut
        Section "Desktop Shortcut" SEC02
          CreateShortCut "`$DESKTOP\`${APP_NAME}.lnk" "`$INSTDIR\shiplus.exe"
        SectionEnd

        # Start menu shortcut
        Section "Start Menu Shortcut" SEC03
          CreateDirectory "`$SMPROGRAMS\`${APP_NAME}"
          CreateShortCut "`$SMPROGRAMS\`${APP_NAME}\`${APP_NAME}.lnk" "`$INSTDIR\shiplus.exe"
          CreateShortCut "`$SMPROGRAMS\`${APP_NAME}\Uninstall.lnk" "`$INSTDIR\uninstall.exe"
        SectionEnd

        # Uninstaller
        Section "Uninstall"
          Delete "`$INSTDIR\uninstall.exe"
          RMDir /r "`$INSTDIR"

          DeleteRegKey HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\`${APP_NAME}"
          DeleteRegKey HKLM "Software\`${APP_NAME}"

          Delete "`$DESKTOP\`${APP_NAME}.lnk"
          Delete "`$SMPROGRAMS\`${APP_NAME}\*.*"
          RMDir "`$SMPROGRAMS\`${APP_NAME}"
        SectionEnd
        "@

        $nsisScript | Out-File -FilePath "installer.nsi" -Encoding UTF8
        Write-Host "NSIS script created"
      shell: powershell

    - name: Create LICENSE file for installer
      run: |
        $license = @"
        MIT License

        Copyright (c) 2024 Shiplus Team

        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:

        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.

        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
        "@

        $license | Out-File -FilePath "LICENSE" -Encoding UTF8
        Write-Host "LICENSE file created"
      shell: powershell

    - name: Build Windows installer
      run: |
        # Build the installer using NSIS
        makensis installer.nsi
        Write-Host "Windows installer created"
      shell: powershell

    - name: Create Windows release package
      run: |
        # Find the exe file and its directory
        $exeFile = Get-ChildItem -Path "build" -Recurse -Filter "shiplus.exe" | Select-Object -First 1
        if ($exeFile) {
          Write-Host "Found exe at: $($exeFile.FullName)"
          $releaseDir = $exeFile.Directory.FullName
          Write-Host "Release directory: $releaseDir"

          # Create archive from the directory containing the exe
          Set-Location $releaseDir
          $archivePath = Join-Path $env:GITHUB_WORKSPACE "shiplus-windows-x64.zip"
          7z a -tzip $archivePath *
          Write-Host "Created archive: $archivePath"
        } else {
          Write-Host "ERROR: Could not find shiplus.exe"
          exit 1
        }
      shell: powershell
        
    - name: Upload Windows artifacts
      uses: actions/upload-artifact@v4
      with:
        name: shiplus-windows-x64
        path: |
          shiplus-windows-x64.zip
          shiplus-windows-x64-installer.exe
        retention-days: 30

  # macOS 构建
  build-macos:
    if: github.event.inputs.build_macos != 'false'
    runs-on: macos-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.19.4'
        channel: 'stable'
        cache: true
        
    - name: Enable macOS desktop
      run: flutter config --enable-macos-desktop
      
    - name: Install dependencies
      run: flutter pub get

    - name: Analyze code (optional)
      run: flutter analyze || true
      continue-on-error: true

    - name: Prepare macOS assets
      run: |
        # 只保留 macOS 平台的可执行文件
        rm -f assets/bin/N_m3u8DL-RE.exe
        rm -f assets/bin/ffmpeg.exe
        echo "macOS assets prepared - keeping non-.exe files only"

    - name: Build macOS Release (Apple Silicon)
      run: flutter build macos --release --verbose

    - name: Create macOS release package
      run: |
        cd build/macos/Build/Products/Release
        zip -r ../../../../../shiplus-macos-arm64.zip shiplus.app

    - name: Upload macOS artifacts
      uses: actions/upload-artifact@v4
      with:
        name: shiplus-macos-arm64
        path: shiplus-macos-arm64.zip
        retention-days: 30

  # Linux 构建
  build-linux:
    if: github.event.inputs.build_linux == 'true'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Install Linux dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y clang cmake ninja-build pkg-config libgtk-3-dev liblzma-dev
        
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.19.4'
        channel: 'stable'
        cache: true
        
    - name: Enable Linux desktop
      run: flutter config --enable-linux-desktop
      
    - name: Install dependencies
      run: flutter pub get

    - name: Analyze code (optional)
      run: flutter analyze || true
      continue-on-error: true

    - name: Prepare Linux assets
      run: |
        # 只保留 Linux 平台的可执行文件（与 macOS 相同，无 .exe 后缀）
        rm -f assets/bin/N_m3u8DL-RE.exe
        rm -f assets/bin/ffmpeg.exe
        echo "Linux assets prepared - keeping non-.exe files only"

    - name: Build Linux Release
      run: flutter build linux --release --verbose
      
    - name: Create Linux release package
      run: |
        cd build/linux/x64/release/bundle
        tar -czf ../../../../../shiplus-linux-x64.tar.gz *
        
    - name: Upload Linux artifacts
      uses: actions/upload-artifact@v4
      with:
        name: shiplus-linux-x64
        path: shiplus-linux-x64.tar.gz
        retention-days: 30

  # 创建 GitHub Release
  create-release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [build-windows, build-macos]
    runs-on: ubuntu-latest
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          shiplus-windows-x64/shiplus-windows-x64.zip
          shiplus-windows-x64/shiplus-windows-x64-installer.exe
          shiplus-macos-arm64/shiplus-macos-arm64.zip
        name: Release ${{ github.ref_name }}
        body: |
          ## 🚀 Shiplus ${{ github.ref_name }}

          ### 📦 下载说明

          #### Windows (x64)
          **推荐安装方式：**
          - 下载: `shiplus-windows-x64-installer.exe`
          - 双击运行安装程序，按提示完成安装
          - 自动创建桌面快捷方式和开始菜单项目

          **便携版：**
          - 下载: `shiplus-windows-x64.zip`
          - 解压后运行 `shiplus.exe`
          - 无需安装，可放置在任意文件夹

          - 系统要求: Windows 10+ (x64)

          #### macOS (Apple Silicon)
          - 下载: `shiplus-macos-arm64.zip`
          - 解压后运行 `shiplus.app`
          - 系统要求: macOS 11.0+ (M1/M2/M3 芯片)

          ### 🔧 安装步骤

          #### Windows 用户
          1. **安装版（推荐）**: 下载 `.exe` 安装程序，双击运行并按提示安装
          2. **便携版**: 下载 `.zip` 压缩包，解压到任意文件夹，运行 `shiplus.exe`

          #### macOS 用户
          1. 下载 `.zip` 压缩包
          2. 解压到应用程序文件夹
          3. 运行 `shiplus.app`

          ### ⚠️ 注意事项
          - Windows 用户首次运行可能需要允许应用程序通过防火墙
          - macOS 用户可能需要在"系统偏好设置 > 安全性与隐私"中允许应用运行
          - 安装版会自动创建卸载程序，可通过控制面板卸载
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
